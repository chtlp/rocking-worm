
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu May 26 11:20:59 CST 2011
//----------------------------------------------------

package parser;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu May 26 11:20:59 CST 2011
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\200\000\002\002\004\000\002\003\004\000\002\003" +
    "\005\000\002\002\005\000\002\002\004\000\002\002\005" +
    "\000\002\002\010\000\002\002\005\000\002\002\007\000" +
    "\002\002\011\000\002\002\010\000\002\002\014\000\002" +
    "\002\005\000\002\002\007\000\002\002\006\000\002\002" +
    "\010\000\002\002\012\000\002\002\013\000\002\002\007" +
    "\000\002\002\003\000\002\024\004\000\002\024\005\000" +
    "\002\024\005\000\002\024\006\000\002\026\005\000\002" +
    "\026\003\000\002\026\004\000\002\027\005\000\002\027" +
    "\003\000\002\027\004\000\002\030\006\000\002\030\003" +
    "\000\002\030\005\000\002\031\005\000\002\031\003\000" +
    "\002\031\004\000\002\032\005\000\002\023\003\000\002" +
    "\023\005\000\002\004\003\000\002\004\005\000\002\005" +
    "\003\000\002\005\007\000\002\006\004\000\002\006\005" +
    "\000\002\033\004\000\002\033\003\000\002\033\005\000" +
    "\002\033\004\000\002\033\003\000\002\034\004\000\002" +
    "\034\005\000\002\034\003\000\002\035\003\000\002\007" +
    "\003\000\002\007\003\000\002\007\006\000\002\007\003" +
    "\000\002\007\003\000\002\007\006\000\002\007\010\000" +
    "\002\007\003\000\002\007\006\000\002\010\005\000\002" +
    "\010\005\000\002\010\005\000\002\010\006\000\002\010" +
    "\007\000\002\010\010\000\002\010\007\000\002\010\010" +
    "\000\002\010\005\000\002\011\003\000\002\011\005\000" +
    "\002\011\003\000\002\012\003\000\002\012\005\000\002" +
    "\013\003\000\002\013\005\000\002\014\003\000\002\014" +
    "\004\000\002\014\004\000\002\014\005\000\002\014\006" +
    "\000\002\014\006\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\016\003\000\002\016\005\000\002\017\003\000\002\017" +
    "\005\000\002\017\007\000\002\020\003\000\002\020\003" +
    "\000\002\020\003\000\002\020\003\000\002\020\003\000" +
    "\002\020\003\000\002\021\005\000\002\021\003\000\002" +
    "\021\003\000\002\021\005\000\002\021\005\000\002\021" +
    "\005\000\002\021\005\000\002\021\005\000\002\021\005" +
    "\000\002\021\006\000\002\022\003\000\002\022\003\000" +
    "\002\022\003\000\002\022\003\000\002\022\003\000\002" +
    "\022\003\000\002\022\003\000\002\022\004\000\002\022" +
    "\004\000\002\025\005\000\002\025\007\000\002\036\003" +
    "\000\002\036\003\000\002\036\003\000\002\036\003\000" +
    "\002\036\003\000\002\036\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0101\000\020\031\007\033\011\034\005\054\015\057" +
    "\012\062\010\105\014\001\002\000\004\002\u0103\001\002" +
    "\000\010\032\372\035\373\065\371\001\002\000\004\010" +
    "\367\001\002\000\012\032\267\035\270\064\271\065\266" +
    "\001\002\000\016\004\017\107\025\110\020\111\021\112" +
    "\024\113\023\001\002\000\016\004\017\107\025\110\020" +
    "\111\021\112\024\113\023\001\002\000\004\060\247\001" +
    "\002\000\004\010\uffee\001\002\000\044\004\017\005\065" +
    "\006\055\011\054\015\063\017\130\041\067\043\071\045" +
    "\057\067\132\103\053\104\062\107\070\110\066\111\051" +
    "\112\072\113\064\001\002\000\004\055\016\001\002\000" +
    "\016\004\017\107\025\110\020\111\021\112\024\113\023" +
    "\001\002\000\116\007\uff87\010\uff87\011\uff87\012\uff87\013" +
    "\uff87\014\uff87\015\uff87\016\uff87\017\uff87\020\uff87\021\uff87" +
    "\022\uff87\023\uff87\024\uff87\025\uff87\026\uff87\027\uff87\030" +
    "\uff87\044\uff87\045\uff87\046\uff87\047\uff87\050\uff87\051\uff87" +
    "\052\uff87\053\uff87\056\uff87\060\uff87\061\uff87\063\uff87\066" +
    "\uff87\070\uff87\072\uff87\073\uff87\074\uff87\075\uff87\076\uff87" +
    "\101\uff87\001\002\000\116\007\uff85\010\uff85\011\uff85\012" +
    "\uff85\013\uff85\014\uff85\015\uff85\016\uff85\017\uff85\020\uff85" +
    "\021\uff85\022\uff85\023\uff85\024\uff85\025\uff85\026\uff85\027" +
    "\uff85\030\uff85\044\uff85\045\uff85\046\uff85\047\uff85\050\uff85" +
    "\051\uff85\052\uff85\053\uff85\056\uff85\060\uff85\061\uff85\063" +
    "\uff85\066\uff85\070\uff85\072\uff85\073\uff85\074\uff85\075\uff85" +
    "\076\uff85\101\uff85\001\002\000\116\007\uff82\010\uff82\011" +
    "\uff82\012\uff82\013\uff82\014\uff82\015\uff82\016\uff82\017\uff82" +
    "\020\uff82\021\uff82\022\uff82\023\uff82\024\uff82\025\uff82\026" +
    "\uff82\027\uff82\030\uff82\044\uff82\045\uff82\046\uff82\047\uff82" +
    "\050\uff82\051\uff82\052\uff82\053\uff82\056\uff82\060\uff82\061" +
    "\uff82\063\uff82\066\uff82\070\uff82\072\uff82\073\uff82\074\uff82" +
    "\075\uff82\076\uff82\101\uff82\001\002\000\006\011\027\056" +
    "\026\001\002\000\116\007\uff83\010\uff83\011\uff83\012\uff83" +
    "\013\uff83\014\uff83\015\uff83\016\uff83\017\uff83\020\uff83\021" +
    "\uff83\022\uff83\023\uff83\024\uff83\025\uff83\026\uff83\027\uff83" +
    "\030\uff83\044\uff83\045\uff83\046\uff83\047\uff83\050\uff83\051" +
    "\uff83\052\uff83\053\uff83\056\uff83\060\uff83\061\uff83\063\uff83" +
    "\066\uff83\070\uff83\072\uff83\073\uff83\074\uff83\075\uff83\076" +
    "\uff83\101\uff83\001\002\000\116\007\uff84\010\uff84\011\uff84" +
    "\012\uff84\013\uff84\014\uff84\015\uff84\016\uff84\017\uff84\020" +
    "\uff84\021\uff84\022\uff84\023\uff84\024\uff84\025\uff84\026\uff84" +
    "\027\uff84\030\uff84\044\uff84\045\uff84\046\uff84\047\uff84\050" +
    "\uff84\051\uff84\052\uff84\053\uff84\056\uff84\060\uff84\061\uff84" +
    "\063\uff84\066\uff84\070\uff84\072\uff84\073\uff84\074\uff84\075" +
    "\uff84\076\uff84\101\uff84\001\002\000\116\007\uff86\010\uff86" +
    "\011\uff86\012\uff86\013\uff86\014\uff86\015\uff86\016\uff86\017" +
    "\uff86\020\uff86\021\uff86\022\uff86\023\uff86\024\uff86\025\uff86" +
    "\026\uff86\027\uff86\030\uff86\044\uff86\045\uff86\046\uff86\047" +
    "\uff86\050\uff86\051\uff86\052\uff86\053\uff86\056\uff86\060\uff86" +
    "\061\uff86\063\uff86\066\uff86\070\uff86\072\uff86\073\uff86\074" +
    "\uff86\075\uff86\076\uff86\101\uff86\001\002\000\004\011\123" +
    "\001\002\000\020\004\017\105\014\107\025\110\020\111" +
    "\021\112\024\113\023\001\002\000\106\007\uffa7\010\uffa7" +
    "\012\uffa7\013\121\014\uffa7\015\uffa7\016\uffa7\017\uffa7\020" +
    "\uffa7\021\uffa7\022\uffa7\023\uffa7\024\uffa7\025\uffa7\026\uffa7" +
    "\027\uffa7\030\uffa7\044\uffa7\045\uffa7\046\uffa7\047\uffa7\050" +
    "\uffa7\051\uffa7\052\uffa7\053\uffa7\060\uffa7\061\uffa7\070\uffa7" +
    "\072\uffa7\073\uffa7\074\uffa7\075\uffa7\076\uffa7\101\uffa7\001" +
    "\002\000\004\012\045\001\002\000\004\012\044\001\002" +
    "\000\014\007\034\010\uffb2\012\uffb2\074\035\075\036\001" +
    "\002\000\016\004\017\107\025\110\020\111\021\112\024" +
    "\113\023\001\002\000\010\007\041\010\uffb1\012\uffb1\001" +
    "\002\000\010\007\037\010\uffb0\012\uffb0\001\002\000\016" +
    "\004\017\107\025\110\020\111\021\112\024\113\023\001" +
    "\002\000\006\010\uffad\012\uffad\001\002\000\016\004\017" +
    "\107\025\110\020\111\021\112\024\113\023\001\002\000" +
    "\006\010\uffae\012\uffae\001\002\000\006\010\uffaf\012\uffaf" +
    "\001\002\000\004\010\ufff7\001\002\000\004\056\046\001" +
    "\002\000\004\011\047\001\002\000\040\004\017\005\065" +
    "\006\055\011\054\015\063\041\067\043\071\045\057\103" +
    "\053\104\062\107\070\110\066\111\051\112\072\113\064" +
    "\001\002\000\060\007\uff9a\010\uff9a\012\uff9a\014\uff9a\015" +
    "\uff9a\016\uff9a\017\uff9a\020\uff9a\021\uff9a\022\uff9a\023\uff9a" +
    "\024\uff9a\025\uff9a\026\uff9a\027\uff9a\030\uff9a\060\uff9a\061" +
    "\uff9a\070\uff9a\072\uff9a\073\uff9a\076\uff9a\101\uff9a\001\002" +
    "\000\064\007\uff82\010\uff82\011\uffa8\012\uff82\013\uff82\014" +
    "\uff82\015\uff82\016\uff82\017\uff82\020\uff82\021\uff82\022\uff82" +
    "\023\uff82\024\uff82\025\uff82\026\uff82\027\uff82\030\uff82\060" +
    "\uff82\061\uff82\070\uff82\072\uff82\073\uff82\076\uff82\101\uff82" +
    "\001\002\000\004\011\116\001\002\000\062\007\uff8f\010" +
    "\uff8f\012\uff8f\014\uff8f\015\uff8f\016\uff8f\017\uff8f\020\uff8f" +
    "\021\uff8f\022\uff8f\023\uff8f\024\uff8f\025\uff8f\026\uff8f\027" +
    "\uff8f\030\uff8f\042\uff8f\060\uff8f\061\uff8f\070\uff8f\072\uff8f" +
    "\073\uff8f\076\uff8f\101\uff8f\001\002\000\042\004\017\005" +
    "\065\006\055\011\054\015\063\041\067\043\071\045\057" +
    "\103\053\104\062\105\014\107\070\110\066\111\051\112" +
    "\072\113\064\001\002\000\062\007\uff92\010\uff92\012\uff92" +
    "\014\uff92\015\uff92\016\uff92\017\uff92\020\uff92\021\uff92\022" +
    "\uff92\023\uff92\024\uff92\025\uff92\026\uff92\027\uff92\030\uff92" +
    "\042\uff92\060\uff92\061\uff92\070\uff92\072\uff92\073\uff92\076" +
    "\uff92\101\uff92\001\002\000\004\012\111\001\002\000\062" +
    "\007\uff90\010\uff90\012\uff90\014\uff90\015\uff90\016\uff90\017" +
    "\uff90\020\uff90\021\uff90\022\uff90\023\uff90\024\uff90\025\uff90" +
    "\026\uff90\027\uff90\030\uff90\042\uff90\060\uff90\061\uff90\070" +
    "\uff90\072\uff90\073\uff90\076\uff90\101\uff90\001\002\000\060" +
    "\007\uff9b\010\uff9b\012\uff9b\014\uff9b\015\uff9b\016\uff9b\017" +
    "\uff9b\020\uff9b\021\uff9b\022\uff9b\023\uff9b\024\uff9b\025\uff9b" +
    "\026\uff9b\027\uff9b\030\uff9b\060\uff9b\061\uff9b\070\uff9b\072" +
    "\uff9b\073\uff9b\076\uff9b\101\uff9b\001\002\000\020\007\075" +
    "\012\uffdc\014\100\015\101\016\076\017\077\020\102\001" +
    "\002\000\062\007\uff8e\010\uff8e\012\uff8e\014\uff8e\015\uff8e" +
    "\016\uff8e\017\uff8e\020\uff8e\021\uff8e\022\uff8e\023\uff8e\024" +
    "\uff8e\025\uff8e\026\uff8e\027\uff8e\030\uff8e\042\uff8e\060\uff8e" +
    "\061\uff8e\070\uff8e\072\uff8e\073\uff8e\076\uff8e\101\uff8e\001" +
    "\002\000\006\006\073\045\074\001\002\000\064\007\uff83" +
    "\010\uff83\011\uffac\012\uff83\013\uff83\014\uff83\015\uff83\016" +
    "\uff83\017\uff83\020\uff83\021\uff83\022\uff83\023\uff83\024\uff83" +
    "\025\uff83\026\uff83\027\uff83\030\uff83\060\uff83\061\uff83\070" +
    "\uff83\072\uff83\073\uff83\076\uff83\101\uff83\001\002\000\062" +
    "\007\uff91\010\uff91\012\uff91\014\uff91\015\uff91\016\uff91\017" +
    "\uff91\020\uff91\021\uff91\022\uff91\023\uff91\024\uff91\025\uff91" +
    "\026\uff91\027\uff91\030\uff91\042\uff91\060\uff91\061\uff91\070" +
    "\uff91\072\uff91\073\uff91\076\uff91\101\uff91\001\002\000\064" +
    "\007\uff85\010\uff85\011\uffaa\012\uff85\013\uff85\014\uff85\015" +
    "\uff85\016\uff85\017\uff85\020\uff85\021\uff85\022\uff85\023\uff85" +
    "\024\uff85\025\uff85\026\uff85\027\uff85\030\uff85\060\uff85\061" +
    "\uff85\070\uff85\072\uff85\073\uff85\076\uff85\101\uff85\001\002" +
    "\000\062\007\uff8c\010\uff8c\012\uff8c\014\uff8c\015\uff8c\016" +
    "\uff8c\017\uff8c\020\uff8c\021\uff8c\022\uff8c\023\uff8c\024\uff8c" +
    "\025\uff8c\026\uff8c\027\uff8c\030\uff8c\042\uff8c\060\uff8c\061" +
    "\uff8c\070\uff8c\072\uff8c\073\uff8c\076\uff8c\101\uff8c\001\002" +
    "\000\064\007\uff86\010\uff86\011\uffa9\012\uff86\013\uff86\014" +
    "\uff86\015\uff86\016\uff86\017\uff86\020\uff86\021\uff86\022\uff86" +
    "\023\uff86\024\uff86\025\uff86\026\uff86\027\uff86\030\uff86\060" +
    "\uff86\061\uff86\070\uff86\072\uff86\073\uff86\076\uff86\101\uff86" +
    "\001\002\000\062\007\uff8d\010\uff8d\012\uff8d\014\uff8d\015" +
    "\uff8d\016\uff8d\017\uff8d\020\uff8d\021\uff8d\022\uff8d\023\uff8d" +
    "\024\uff8d\025\uff8d\026\uff8d\027\uff8d\030\uff8d\042\uff8d\060" +
    "\uff8d\061\uff8d\070\uff8d\072\uff8d\073\uff8d\076\uff8d\101\uff8d" +
    "\001\002\000\064\007\uff84\010\uff84\011\uffab\012\uff84\013" +
    "\uff84\014\uff84\015\uff84\016\uff84\017\uff84\020\uff84\021\uff84" +
    "\022\uff84\023\uff84\024\uff84\025\uff84\026\uff84\027\uff84\030" +
    "\uff84\060\uff84\061\uff84\070\uff84\072\uff84\073\uff84\076\uff84" +
    "\101\uff84\001\002\000\062\007\uff8b\010\uff8b\012\uff8b\014" +
    "\uff8b\015\uff8b\016\uff8b\017\uff8b\020\uff8b\021\uff8b\022\uff8b" +
    "\023\uff8b\024\uff8b\025\uff8b\026\uff8b\027\uff8b\030\uff8b\042" +
    "\uff8b\060\uff8b\061\uff8b\070\uff8b\072\uff8b\073\uff8b\076\uff8b" +
    "\101\uff8b\001\002\000\062\007\uff8a\010\uff8a\012\uff8a\014" +
    "\uff8a\015\uff8a\016\uff8a\017\uff8a\020\uff8a\021\uff8a\022\uff8a" +
    "\023\uff8a\024\uff8a\025\uff8a\026\uff8a\027\uff8a\030\uff8a\042" +
    "\uff8a\060\uff8a\061\uff8a\070\uff8a\072\uff8a\073\uff8a\076\uff8a" +
    "\101\uff8a\001\002\000\040\004\017\005\065\006\055\011" +
    "\054\015\063\041\067\043\071\045\057\103\053\104\062" +
    "\107\070\110\066\111\051\112\072\113\064\001\002\000" +
    "\040\004\017\005\065\006\055\011\054\015\063\041\067" +
    "\043\071\045\057\103\053\104\062\107\070\110\066\111" +
    "\051\112\072\113\064\001\002\000\040\004\017\005\065" +
    "\006\055\011\054\015\063\041\067\043\071\045\057\103" +
    "\053\104\062\107\070\110\066\111\051\112\072\113\064" +
    "\001\002\000\040\004\017\005\065\006\055\011\054\015" +
    "\063\041\067\043\071\045\057\103\053\104\062\107\070" +
    "\110\066\111\051\112\072\113\064\001\002\000\040\004" +
    "\017\005\065\006\055\011\054\015\063\041\067\043\071" +
    "\045\057\103\053\104\062\107\070\110\066\111\051\112" +
    "\072\113\064\001\002\000\040\004\017\005\065\006\055" +
    "\011\054\015\063\041\067\043\071\045\057\103\053\104" +
    "\062\107\070\110\066\111\051\112\072\113\064\001\002" +
    "\000\060\007\uff96\010\uff96\012\uff96\014\uff96\015\uff96\016" +
    "\uff96\017\uff96\020\uff96\021\uff96\022\uff96\023\uff96\024\uff96" +
    "\025\uff96\026\uff96\027\uff96\030\uff96\060\uff96\061\uff96\070" +
    "\uff96\072\uff96\073\uff96\076\uff96\101\uff96\001\002\000\060" +
    "\007\uff98\010\uff98\012\uff98\014\uff98\015\uff98\016\076\017" +
    "\077\020\102\021\uff98\022\uff98\023\uff98\024\uff98\025\uff98" +
    "\026\uff98\027\uff98\030\uff98\060\uff98\061\uff98\070\uff98\072" +
    "\uff98\073\uff98\076\uff98\101\uff98\001\002\000\060\007\uff99" +
    "\010\uff99\012\uff99\014\uff99\015\uff99\016\076\017\077\020" +
    "\102\021\uff99\022\uff99\023\uff99\024\uff99\025\uff99\026\uff99" +
    "\027\uff99\030\uff99\060\uff99\061\uff99\070\uff99\072\uff99\073" +
    "\uff99\076\uff99\101\uff99\001\002\000\060\007\uff97\010\uff97" +
    "\012\uff97\014\uff97\015\uff97\016\uff97\017\uff97\020\uff97\021" +
    "\uff97\022\uff97\023\uff97\024\uff97\025\uff97\026\uff97\027\uff97" +
    "\030\uff97\060\uff97\061\uff97\070\uff97\072\uff97\073\uff97\076" +
    "\uff97\101\uff97\001\002\000\060\007\uff95\010\uff95\012\uff95" +
    "\014\uff95\015\uff95\016\uff95\017\uff95\020\uff95\021\uff95\022" +
    "\uff95\023\uff95\024\uff95\025\uff95\026\uff95\027\uff95\030\uff95" +
    "\060\uff95\061\uff95\070\uff95\072\uff95\073\uff95\076\uff95\101" +
    "\uff95\001\002\000\004\012\uffdb\001\002\000\004\010\ufff6" +
    "\001\002\000\016\012\115\014\100\015\101\016\076\017" +
    "\077\020\102\001\002\000\004\012\114\001\002\000\060" +
    "\007\uff94\010\uff94\012\uff94\014\uff94\015\uff94\016\uff94\017" +
    "\uff94\020\uff94\021\uff94\022\uff94\023\uff94\024\uff94\025\uff94" +
    "\026\uff94\027\uff94\030\uff94\060\uff94\061\uff94\070\uff94\072" +
    "\uff94\073\uff94\076\uff94\101\uff94\001\002\000\060\007\uff9c" +
    "\010\uff9c\012\uff9c\014\uff9c\015\uff9c\016\uff9c\017\uff9c\020" +
    "\uff9c\021\uff9c\022\uff9c\023\uff9c\024\uff9c\025\uff9c\026\uff9c" +
    "\027\uff9c\030\uff9c\060\uff9c\061\uff9c\070\uff9c\072\uff9c\073" +
    "\uff9c\076\uff9c\101\uff9c\001\002\000\016\004\017\107\025" +
    "\110\020\111\021\112\024\113\023\001\002\000\004\012" +
    "\120\001\002\000\060\007\uff93\010\uff93\012\uff93\014\uff93" +
    "\015\uff93\016\uff93\017\uff93\020\uff93\021\uff93\022\uff93\023" +
    "\uff93\024\uff93\025\uff93\026\uff93\027\uff93\030\uff93\060\uff93" +
    "\061\uff93\070\uff93\072\uff93\073\uff93\076\uff93\101\uff93\001" +
    "\002\000\016\004\017\107\025\110\020\111\021\112\024" +
    "\113\023\001\002\000\104\007\uffa6\010\uffa6\012\uffa6\014" +
    "\uffa6\015\uffa6\016\uffa6\017\uffa6\020\uffa6\021\uffa6\022\uffa6" +
    "\023\uffa6\024\uffa6\025\uffa6\026\uffa6\027\uffa6\030\uffa6\044" +
    "\uffa6\045\uffa6\046\uffa6\047\uffa6\050\uffa6\051\uffa6\052\uffa6" +
    "\053\uffa6\060\uffa6\061\uffa6\070\uffa6\072\uffa6\073\uffa6\074" +
    "\uffa6\075\uffa6\076\uffa6\101\uffa6\001\002\000\040\004\017" +
    "\005\065\006\055\011\054\015\063\041\067\043\071\045" +
    "\057\103\053\104\062\107\070\110\066\111\051\112\072" +
    "\113\064\001\002\000\004\012\125\001\002\000\004\010" +
    "\ufff8\001\002\000\020\010\uffed\012\uffed\060\140\061\134" +
    "\070\136\072\135\073\145\001\002\000\022\007\244\010" +
    "\uffb6\012\uffb6\060\uffb6\061\uffb6\070\uffb6\072\uffb6\073\uffb6" +
    "\001\002\000\022\007\uffb7\010\uffb7\012\uffb7\060\uffb7\061" +
    "\uffb7\070\uffb7\072\uffb7\073\uffb7\001\002\000\036\007\uffb9" +
    "\010\uffb9\012\uffb9\014\100\015\101\016\076\017\077\020" +
    "\102\060\uffb9\061\uffb9\070\uffb9\072\uffb9\073\uffb9\076\242" +
    "\001\002\000\042\004\017\005\065\006\055\011\054\015" +
    "\063\017\130\041\067\043\071\045\057\103\053\104\062" +
    "\107\070\110\066\111\051\112\072\113\064\001\002\000" +
    "\020\010\uffec\012\uffec\060\140\061\134\070\136\072\135" +
    "\073\145\001\002\000\044\004\017\005\065\006\055\011" +
    "\171\015\063\040\170\041\067\043\071\045\057\077\173" +
    "\103\053\104\062\107\070\110\066\111\051\112\072\113" +
    "\064\001\002\000\044\004\017\005\065\006\055\011\171" +
    "\015\063\040\170\041\067\043\071\045\057\077\173\103" +
    "\053\104\062\107\070\110\066\111\051\112\072\113\064" +
    "\001\002\000\004\071\165\001\002\000\006\010\uffdf\012" +
    "\uffdf\001\002\000\020\004\017\011\153\107\025\110\020" +
    "\111\021\112\024\113\023\001\002\000\006\010\uffe2\012" +
    "\uffe2\001\002\000\006\010\uffe5\012\uffe5\001\002\000\006" +
    "\010\uffe8\012\uffe8\001\002\000\006\010\uffea\012\uffea\001" +
    "\002\000\004\071\146\001\002\000\016\004\017\107\025" +
    "\110\020\111\021\112\024\113\023\001\002\000\006\010" +
    "\uffdd\012\uffdd\001\002\000\020\007\163\010\uffb4\012\uffb4" +
    "\061\uffb4\070\uffb4\072\uffb4\073\uffb4\001\002\000\016\010" +
    "\uffe7\012\uffe7\061\134\070\136\072\135\073\145\001\002" +
    "\000\022\007\uffa5\010\uffa5\012\uffa5\061\uffa5\070\uffa5\072" +
    "\uffa5\073\uffa5\076\160\001\002\000\004\105\014\001\002" +
    "\000\004\012\155\001\002\000\004\076\156\001\002\000" +
    "\016\004\017\107\025\110\020\111\021\112\024\113\023" +
    "\001\002\000\020\007\uffa3\010\uffa3\012\uffa3\061\uffa3\070" +
    "\uffa3\072\uffa3\073\uffa3\001\002\000\016\004\017\107\025" +
    "\110\020\111\021\112\024\113\023\001\002\000\020\007" +
    "\uffa4\010\uffa4\012\uffa4\061\uffa4\070\uffa4\072\uffa4\073\uffa4" +
    "\001\002\000\006\010\uffe9\012\uffe9\001\002\000\020\004" +
    "\017\011\153\107\025\110\020\111\021\112\024\113\023" +
    "\001\002\000\016\010\uffb3\012\uffb3\061\uffb3\070\uffb3\072" +
    "\uffb3\073\uffb3\001\002\000\016\004\017\107\025\110\020" +
    "\111\021\112\024\113\023\001\002\000\012\010\uffe1\012" +
    "\uffe1\072\135\073\145\001\002\000\006\010\uffe3\012\uffe3" +
    "\001\002\000\004\077\234\001\002\000\046\004\017\005" +
    "\065\006\055\011\171\015\063\040\170\041\067\043\071" +
    "\045\057\077\173\103\053\104\062\105\014\107\070\110" +
    "\066\111\051\112\072\113\064\001\002\000\032\014\100" +
    "\015\101\016\076\017\077\020\102\021\211\022\210\023" +
    "\213\024\214\025\212\026\207\101\206\001\002\000\004" +
    "\011\202\001\002\000\014\010\uffde\012\uffde\027\176\030" +
    "\177\073\145\001\002\000\006\010\uffe0\012\uffe0\001\002" +
    "\000\044\004\017\005\065\006\055\011\171\015\063\040" +
    "\170\041\067\043\071\045\057\077\173\103\053\104\062" +
    "\107\070\110\066\111\051\112\072\113\064\001\002\000" +
    "\044\004\017\005\065\006\055\011\171\015\063\040\170" +
    "\041\067\043\071\045\057\077\173\103\053\104\062\107" +
    "\070\110\066\111\051\112\072\113\064\001\002\000\020" +
    "\010\uffc0\012\uffc0\027\176\030\uffc0\070\uffc0\072\uffc0\073" +
    "\uffc0\001\002\000\020\010\uffc1\012\uffc1\027\uffc1\030\uffc1" +
    "\070\uffc1\072\uffc1\073\uffc1\001\002\000\004\105\014\001" +
    "\002\000\004\012\204\001\002\000\020\010\uffbf\012\uffbf" +
    "\027\uffbf\030\uffbf\070\uffbf\072\uffbf\073\uffbf\001\002\000" +
    "\044\004\017\005\065\006\055\011\054\015\063\041\067" +
    "\043\071\045\057\100\221\102\220\103\053\104\062\107" +
    "\070\110\066\111\051\112\072\113\064\001\002\000\004" +
    "\011\215\001\002\000\044\004\uff9e\005\uff9e\006\uff9e\011" +
    "\uff9e\015\uff9e\041\uff9e\043\uff9e\045\uff9e\100\uff9e\102\uff9e" +
    "\103\uff9e\104\uff9e\107\uff9e\110\uff9e\111\uff9e\112\uff9e\113" +
    "\uff9e\001\002\000\044\004\uff9d\005\uff9d\006\uff9d\011\uff9d" +
    "\015\uff9d\041\uff9d\043\uff9d\045\uff9d\100\uff9d\102\uff9d\103" +
    "\uff9d\104\uff9d\107\uff9d\110\uff9d\111\uff9d\112\uff9d\113\uff9d" +
    "\001\002\000\044\004\uffa0\005\uffa0\006\uffa0\011\uffa0\015" +
    "\uffa0\041\uffa0\043\uffa0\045\uffa0\100\uffa0\102\uffa0\103\uffa0" +
    "\104\uffa0\107\uffa0\110\uffa0\111\uffa0\112\uffa0\113\uffa0\001" +
    "\002\000\044\004\uffa1\005\uffa1\006\uffa1\011\uffa1\015\uffa1" +
    "\041\uffa1\043\uffa1\045\uffa1\100\uffa1\102\uffa1\103\uffa1\104" +
    "\uffa1\107\uffa1\110\uffa1\111\uffa1\112\uffa1\113\uffa1\001\002" +
    "\000\044\004\uffa2\005\uffa2\006\uffa2\011\uffa2\015\uffa2\041" +
    "\uffa2\043\uffa2\045\uffa2\100\uffa2\102\uffa2\103\uffa2\104\uffa2" +
    "\107\uffa2\110\uffa2\111\uffa2\112\uffa2\113\uffa2\001\002\000" +
    "\044\004\uff9f\005\uff9f\006\uff9f\011\uff9f\015\uff9f\041\uff9f" +
    "\043\uff9f\045\uff9f\100\uff9f\102\uff9f\103\uff9f\104\uff9f\107" +
    "\uff9f\110\uff9f\111\uff9f\112\uff9f\113\uff9f\001\002\000\004" +
    "\105\014\001\002\000\004\012\217\001\002\000\020\010" +
    "\uffbc\012\uffbc\027\uffbc\030\uffbc\070\uffbc\072\uffbc\073\uffbc" +
    "\001\002\000\004\011\226\001\002\000\004\011\223\001" +
    "\002\000\032\010\uffc2\012\uffc2\014\100\015\101\016\076" +
    "\017\077\020\102\027\uffc2\030\uffc2\070\uffc2\072\uffc2\073" +
    "\uffc2\001\002\000\004\105\014\001\002\000\004\012\225" +
    "\001\002\000\020\010\uffbd\012\uffbd\027\uffbd\030\uffbd\070" +
    "\uffbd\072\uffbd\073\uffbd\001\002\000\004\105\014\001\002" +
    "\000\004\012\230\001\002\000\020\010\uffbb\012\uffbb\027" +
    "\uffbb\030\uffbb\070\uffbb\072\uffbb\073\uffbb\001\002\000\034" +
    "\012\115\014\100\015\101\016\076\017\077\020\102\021" +
    "\211\022\210\023\213\024\214\025\212\026\207\101\206" +
    "\001\002\000\010\012\233\027\176\030\177\001\002\000" +
    "\020\010\uffba\012\uffba\027\uffba\030\uffba\070\uffba\072\uffba" +
    "\073\uffba\001\002\000\004\011\235\001\002\000\004\105" +
    "\014\001\002\000\004\012\237\001\002\000\020\010\uffbe" +
    "\012\uffbe\027\uffbe\030\uffbe\070\uffbe\072\uffbe\073\uffbe\001" +
    "\002\000\020\010\uffe4\012\uffe4\027\176\030\177\070\136" +
    "\072\135\073\145\001\002\000\006\010\uffe6\012\uffe6\001" +
    "\002\000\016\004\017\107\025\110\020\111\021\112\024" +
    "\113\023\001\002\000\022\007\uffb8\010\uffb8\012\uffb8\060" +
    "\uffb8\061\uffb8\070\uffb8\072\uffb8\073\uffb8\001\002\000\042" +
    "\004\017\005\065\006\055\011\054\015\063\017\130\041" +
    "\067\043\071\045\057\103\053\104\062\107\070\110\066" +
    "\111\051\112\072\113\064\001\002\000\020\010\uffb5\012" +
    "\uffb5\060\uffb5\061\uffb5\070\uffb5\072\uffb5\073\uffb5\001\002" +
    "\000\006\010\uffeb\012\uffeb\001\002\000\016\004\017\107" +
    "\025\110\020\111\021\112\024\113\023\001\002\000\006" +
    "\010\ufff5\061\251\001\002\000\044\004\017\005\065\006" +
    "\055\011\171\015\063\040\170\041\067\043\071\045\057" +
    "\077\173\103\053\104\062\107\070\110\066\111\051\112" +
    "\072\113\064\001\002\000\010\010\ufff4\027\176\030\177" +
    "\001\002\000\004\010\ufffd\001\002\000\004\063\255\001" +
    "\002\000\016\004\017\107\025\110\020\111\021\112\024" +
    "\113\023\001\002\000\004\021\262\001\002\000\006\010" +
    "\ufff3\061\260\001\002\000\044\004\017\005\065\006\055" +
    "\011\171\015\063\040\170\041\067\043\071\045\057\077" +
    "\173\103\053\104\062\107\070\110\066\111\051\112\072" +
    "\113\064\001\002\000\010\010\ufff2\027\176\030\177\001" +
    "\002\000\040\004\017\005\065\006\055\011\054\015\063" +
    "\041\067\043\071\045\057\103\053\104\062\107\070\110" +
    "\066\111\051\112\072\113\064\001\002\000\022\007\264" +
    "\010\uff89\014\100\015\101\016\076\017\077\020\102\061" +
    "\uff89\001\002\000\016\004\017\107\025\110\020\111\021" +
    "\112\024\113\023\001\002\000\006\010\uff88\061\uff88\001" +
    "\002\000\016\004\017\107\025\110\020\111\021\112\024" +
    "\113\023\001\002\000\016\004\017\107\025\110\020\111" +
    "\021\112\024\113\023\001\002\000\016\004\017\107\025" +
    "\110\020\111\021\112\024\113\023\001\002\000\004\065" +
    "\272\001\002\000\016\004\017\107\025\110\020\111\021" +
    "\112\024\113\023\001\002\000\004\066\274\001\002\000" +
    "\016\004\017\107\025\110\020\111\021\112\024\113\023" +
    "\001\002\000\004\011\276\001\002\000\016\004\017\107" +
    "\025\110\020\111\021\112\024\113\023\001\002\000\004" +
    "\012\300\001\002\000\004\010\ufff0\001\002\000\004\011" +
    "\302\001\002\000\020\004\017\036\307\107\025\110\020" +
    "\111\021\112\024\113\023\001\002\000\004\012\357\001" +
    "\002\000\006\007\uffd8\012\uffd8\001\002\000\006\007\355" +
    "\012\uffda\001\002\000\022\044\315\045\323\046\324\047" +
    "\314\050\317\051\316\052\322\053\320\001\002\000\004" +
    "\037\310\001\002\000\004\011\311\001\002\000\016\004" +
    "\017\107\025\110\020\111\021\112\024\113\023\001\002" +
    "\000\004\012\313\001\002\000\006\007\uffd7\012\uffd7\001" +
    "\002\000\016\007\uffc8\012\uffc8\040\uffc8\041\uffc8\042\uffc8" +
    "\043\uffc8\001\002\000\016\007\uffcb\012\uffcb\040\uffcb\041" +
    "\uffcb\042\uffcb\043\uffcb\001\002\000\004\011\347\001\002" +
    "\000\016\007\uffc7\012\uffc7\040\uffc7\041\uffc7\042\uffc7\043" +
    "\uffc7\001\002\000\004\011\344\001\002\000\016\007\uffd6" +
    "\012\uffd6\040\331\041\330\042\332\043\333\001\002\000" +
    "\016\007\uffc4\012\uffc4\040\uffc4\041\uffc4\042\uffc4\043\uffc4" +
    "\001\002\000\016\007\uffca\012\uffca\040\uffca\041\uffca\042" +
    "\uffca\043\uffca\001\002\000\004\011\325\001\002\000\004" +
    "\006\326\001\002\000\004\012\327\001\002\000\016\007" +
    "\uffc9\012\uffc9\040\uffc9\041\uffc9\042\uffc9\043\uffc9\001\002" +
    "\000\022\005\065\006\055\015\063\041\067\043\071\045" +
    "\057\103\053\104\062\001\002\000\004\043\340\001\002" +
    "\000\006\007\uffcc\012\uffcc\001\002\000\012\007\uffd3\012" +
    "\uffd3\041\330\042\332\001\002\000\006\007\uffcd\012\uffcd" +
    "\001\002\000\006\007\uffd0\012\uffd0\001\002\000\006\007" +
    "\uffd5\012\uffd5\001\002\000\006\007\uffd1\012\uffd1\001\002" +
    "\000\012\007\uffd4\012\uffd4\041\330\042\332\001\002\000" +
    "\006\007\uffd2\012\uffd2\001\002\000\010\007\uffcf\012\uffcf" +
    "\042\332\001\002\000\006\007\uffce\012\uffce\001\002\000" +
    "\004\006\345\001\002\000\004\012\346\001\002\000\016" +
    "\007\uffc3\012\uffc3\040\uffc3\041\uffc3\042\uffc3\043\uffc3\001" +
    "\002\000\004\006\350\001\002\000\006\007\351\012\352" +
    "\001\002\000\004\006\353\001\002\000\016\007\uffc6\012" +
    "\uffc6\040\uffc6\041\uffc6\042\uffc6\043\uffc6\001\002\000\004" +
    "\012\354\001\002\000\016\007\uffc5\012\uffc5\040\uffc5\041" +
    "\uffc5\042\uffc5\043\uffc5\001\002\000\020\004\017\036\307" +
    "\107\025\110\020\111\021\112\024\113\023\001\002\000" +
    "\004\012\uffd9\001\002\000\004\010\ufffb\001\002\000\004" +
    "\010\ufffe\001\002\000\004\066\362\001\002\000\016\004" +
    "\017\107\025\110\020\111\021\112\024\113\023\001\002" +
    "\000\004\011\364\001\002\000\016\004\017\107\025\110" +
    "\020\111\021\112\024\113\023\001\002\000\004\012\366" +
    "\001\002\000\004\010\ufff1\001\002\000\022\002\000\031" +
    "\007\033\011\034\005\054\015\057\012\062\010\105\014" +
    "\001\002\000\004\002\uffff\001\002\000\016\004\017\107" +
    "\025\110\020\111\021\112\024\113\023\001\002\000\016" +
    "\004\017\107\025\110\020\111\021\112\024\113\023\001" +
    "\002\000\016\004\017\107\025\110\020\111\021\112\024" +
    "\113\023\001\002\000\006\007\375\010\ufffa\001\002\000" +
    "\016\004\017\107\025\110\020\111\021\112\024\113\023" +
    "\001\002\000\004\010\ufff9\001\002\000\004\010\ufffc\001" +
    "\002\000\004\066\u0101\001\002\000\016\004\017\107\025" +
    "\110\020\111\021\112\024\113\023\001\002\000\004\010" +
    "\uffef\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0101\000\010\002\005\003\003\024\012\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\036\253\001\001\000\004\036\252\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\011\126" +
    "\012\125\015\051\016\057\021\130\022\047\036\027\001" +
    "\001\000\002\001\001\000\004\036\021\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\014\030\016\032\024\031\036" +
    "\027\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\014\042\016\032\036" +
    "\027\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\014\037\016\032\036\027\001\001\000\002\001\001\000" +
    "\010\014\041\016\032\036\027\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\015\051\016\057\021\060\022\047" +
    "\023\055\036\027\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\015\051" +
    "\016\057\021\111\022\047\024\112\036\027\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\015\051\016\057\021\060\022\047\023\107\036\027\001" +
    "\001\000\014\015\051\016\057\021\106\022\047\036\027" +
    "\001\001\000\014\015\051\016\057\021\105\022\047\036" +
    "\027\001\001\000\014\015\051\016\057\021\104\022\047" +
    "\036\027\001\001\000\014\015\051\016\057\021\103\022" +
    "\047\036\027\001\001\000\014\015\051\016\057\021\102" +
    "\022\047\036\027\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\016\116\036\027\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\036\121\001\001\000\002\001\001\000\016" +
    "\015\051\016\057\021\060\022\047\023\123\036\027\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\026\245" +
    "\027\142\030\141\031\140\032\136\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\011\126" +
    "\012\132\015\051\016\057\021\130\022\047\036\027\001" +
    "\001\000\014\026\143\027\142\030\141\031\140\032\136" +
    "\001\001\000\016\010\237\015\051\016\057\021\171\022" +
    "\047\036\027\001\001\000\016\010\173\015\051\016\057" +
    "\021\171\022\047\036\027\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\013\150\017\147\036\151\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\014\146\016\032" +
    "\036\027\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\027\161\030\141\031\140\032\136\001\001\000\002" +
    "\001\001\000\004\024\153\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\036\156\001\001\000\002\001\001" +
    "\000\004\036\160\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\013\163\017\147\036\151\001\001\000\002" +
    "\001\001\000\006\016\165\036\027\001\001\000\006\031" +
    "\166\032\136\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\010\231\015\051\016\057\021\230\022\047\024" +
    "\112\036\027\001\001\000\004\020\204\001\001\000\002" +
    "\001\001\000\004\032\174\001\001\000\002\001\001\000" +
    "\016\010\200\015\051\016\057\021\171\022\047\036\027" +
    "\001\001\000\016\010\177\015\051\016\057\021\171\022" +
    "\047\036\027\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\024\202\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\015\051\016\057\021\221\022\047\036\027" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\024\215\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\024\223\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\024\226\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\020\204\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\024\235\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\030\240\031\140\032\136\001\001\000\002\001\001" +
    "\000\004\036\242\001\001\000\002\001\001\000\020\011" +
    "\126\012\244\015\051\016\057\021\130\022\047\036\027" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\036" +
    "\247\001\001\000\002\001\001\000\016\010\251\015\051" +
    "\016\057\021\171\022\047\036\027\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\016\255" +
    "\025\256\036\027\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\010\260\015\051\016\057\021\171\022\047" +
    "\036\027\001\001\000\002\001\001\000\014\015\051\016" +
    "\057\021\262\022\047\036\027\001\001\000\002\001\001" +
    "\000\010\016\255\025\264\036\027\001\001\000\002\001" +
    "\001\000\004\036\360\001\001\000\004\036\357\001\001" +
    "\000\004\036\300\001\001\000\002\001\001\000\004\036" +
    "\272\001\001\000\002\001\001\000\004\036\274\001\001" +
    "\000\002\001\001\000\006\016\276\036\027\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\004\302\005\304\006\303\016\305\036\027\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\320\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\016\311\036\027\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\033\335" +
    "\034\334\035\333\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\022\341\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\034\336\035\333\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\034\340\035\333\001\001\000\002" +
    "\001\001\000\004\035\342\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\004\355" +
    "\005\304\006\303\016\305\036\027\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\036\362\001\001\000\002\001\001\000\006\016" +
    "\364\036\027\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\002\005\003\367\024\012\001\001\000\002\001" +
    "\001\000\004\036\377\001\001\000\004\036\376\001\001" +
    "\000\004\036\373\001\001\000\002\001\001\000\004\036" +
    "\375\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\036\u0101\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 
  public void report_error(String message, Object info) {
    StringBuffer m = new StringBuffer("Error ");

    if (info instanceof java_cup.runtime.Symbol) 
      m.append( "("+info.toString()+")" );
     
    m.append(" : "+message);
   
    throw new RuntimeException(m.toString());
  }
   
  public void report_fatal_error(String message, Object info) {
    report_error(message, info);
  }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // iden ::= SUM 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new String("sum"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("iden",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // iden ::= AVG 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new String("avg"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("iden",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // iden ::= COUNT 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new String("count"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("iden",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // iden ::= MIN 
            {
              String RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new String("min"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("iden",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // iden ::= MAX 
            {
              String RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new String("max"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("iden",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // iden ::= ID 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("iden",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // updateList ::= colName EQ value COMMA updateList 
            {
              UpdateList RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ColName c = (ColName)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Value v = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		UpdateList u = (UpdateList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new UpdateList(c.pos, c, v ,u);
	if (Absyn.DEBUG) System.out.println("updateList2");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("updateList",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // updateList ::= colName EQ value 
            {
              UpdateList RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ColName c = (ColName)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Value v = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new UpdateList(c.pos, c, v ,null);
	if (Absyn.DEBUG) System.out.println("updateList1");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("updateList",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // constValue ::= MINUS FLOAT 
            {
              ConstValue RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new FloatConstValue(fleft, 0-((Float)f).floatValue());
	if (Absyn.DEBUG) System.out.println("constValue9");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constValue",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // constValue ::= MINUS NUM 
            {
              ConstValue RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new IntConstValue(ileft, 0-i.intValue());
	if (Absyn.DEBUG) System.out.println("constValue8");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constValue",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // constValue ::= DEFAULT 
            {
              ConstValue RESULT =null;
		RESULT = new DefaultConstValue();
	if (Absyn.DEBUG) System.out.println("constValue7");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constValue",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // constValue ::= NULL 
            {
              ConstValue RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NullConstValue(nleft);
	if (Absyn.DEBUG) System.out.println("constValue6");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constValue",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // constValue ::= FALSE 
            {
              ConstValue RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new BoolConstValue(fleft,false);
	if (Absyn.DEBUG) System.out.println("constValue5");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constValue",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // constValue ::= TRUE 
            {
              ConstValue RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new BoolConstValue(tleft, true);
	if (Absyn.DEBUG) System.out.println("constValue4");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constValue",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // constValue ::= FLOAT 
            {
              ConstValue RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new FloatConstValue(fleft, ((Float)f).floatValue());
	if (Absyn.DEBUG) System.out.println("constValue3");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constValue",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // constValue ::= STR 
            {
              ConstValue RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new StringConstValue(sleft, s);
	if (Absyn.DEBUG) System.out.println("constValue2");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constValue",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // constValue ::= NUM 
            {
              ConstValue RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new IntConstValue(ileft, i.intValue());
	if (Absyn.DEBUG) System.out.println("constValue1");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constValue",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // value ::= func LPAREN colName RPAREN 
            {
              Value RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Func f = (Func)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ColName c = (ColName)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new FuncValue(f.pos,f,c);
	if (Absyn.DEBUG) System.out.println("value10");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // value ::= LPAREN selectE RPAREN 
            {
              Value RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Select s = (Select)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new SubqueryValue(s.pos,s);
	if (Absyn.DEBUG) System.out.println("value9");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // value ::= value MOD value 
            {
              Value RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Value v1 = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Value v2 = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new AopValue(v1.pos,v1,4,v2);
	if (Absyn.DEBUG) System.out.println("value8");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // value ::= value DIV value 
            {
              Value RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Value v1 = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Value v2 = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new AopValue(v1.pos,v1,3,v2);
	if (Absyn.DEBUG) System.out.println("value7");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // value ::= value MULT value 
            {
              Value RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Value v1 = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Value v2 = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new AopValue(v1.pos,v1,2,v2);
	if (Absyn.DEBUG) System.out.println("value6");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // value ::= value MINUS value 
            {
              Value RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Value v1 = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Value v2 = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new AopValue(v1.pos,v1,1,v2);
	if (Absyn.DEBUG) System.out.println("value5");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // value ::= value PLUS value 
            {
              Value RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Value v1 = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Value v2 = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new AopValue(v1.pos,v1,0,v2);
	if (Absyn.DEBUG) System.out.println("value4");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // value ::= constValue 
            {
              Value RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ConstValue c = (ConstValue)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = c;
	if (Absyn.DEBUG) System.out.println("value3");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // value ::= colName 
            {
              Value RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ColName c = (ColName)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ColNameValue(c.pos,c);
	if (Absyn.DEBUG) System.out.println("value2");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // value ::= LPAREN value RPAREN 
            {
              Value RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Value v = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new BracketValue(v.pos,v);
	if (Absyn.DEBUG) System.out.println("value1");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // cop ::= NEQ 
            {
              Cop RESULT =null;
		RESULT = new Cop(5);
	if (Absyn.DEBUG) System.out.println("Cop6");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cop",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // cop ::= GTEQ 
            {
              Cop RESULT =null;
		RESULT = new Cop(4);
	if (Absyn.DEBUG) System.out.println("Cop5");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cop",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // cop ::= LTEQ 
            {
              Cop RESULT =null;
		RESULT = new Cop(3);
	if (Absyn.DEBUG) System.out.println("Cop4");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cop",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // cop ::= EQ 
            {
              Cop RESULT =null;
		RESULT = new Cop(2);
	if (Absyn.DEBUG) System.out.println("Cop3");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cop",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // cop ::= GT 
            {
              Cop RESULT =null;
		RESULT = new Cop(1);
	if (Absyn.DEBUG) System.out.println("Cop2");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cop",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // cop ::= LT 
            {
              Cop RESULT =null;
		RESULT = new Cop(0);
	if (Absyn.DEBUG) System.out.println("Cop1");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cop",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // tblRef ::= LPAREN selectE RPAREN AS iden 
            {
              TblRef RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Select s = (Select)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new TblRef(ileft,null,null,s,i);
	if (Absyn.DEBUG) System.out.println("tblRef3");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tblRef",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // tblRef ::= iden AS iden 
            {
              TblRef RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int jleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int jright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String j = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new TblRef(ileft,i,j,null,null);
	if (Absyn.DEBUG) System.out.println("tblRef2");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tblRef",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // tblRef ::= iden 
            {
              TblRef RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new TblRef(ileft,i,null,null,null);
	if (Absyn.DEBUG) System.out.println("tblRef1");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tblRef",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // colName ::= iden DOT iden 
            {
              ColName RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int jleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int jright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String j = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ColName(i,j);
	if (Absyn.DEBUG) System.out.println("colName2");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("colName",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // colName ::= iden 
            {
              ColName RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ColName(null,i);
	if (Absyn.DEBUG) System.out.println("colName1");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("colName",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // func ::= SUM 
            {
              Func RESULT =null;
		RESULT = new Func(4);
	if (Absyn.DEBUG) System.out.println("func5");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // func ::= MAX 
            {
              Func RESULT =null;
		RESULT = new Func(3);
	if (Absyn.DEBUG) System.out.println("func4");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // func ::= MIN 
            {
              Func RESULT =null;
		RESULT = new Func(2);
	if (Absyn.DEBUG) System.out.println("func3");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // func ::= COUNT 
            {
              Func RESULT =null;
		RESULT = new Func(1);
	if (Absyn.DEBUG) System.out.println("func2");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // func ::= AVG 
            {
              Func RESULT =null;
		RESULT = new Func(0);
	if (Absyn.DEBUG) System.out.println("func1");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // colNameList ::= colName DESC COMMA colNameList 
            {
              ColNameList RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ColName c = (ColName)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int clleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int clright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ColNameList cl = (ColNameList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ColNameList(c,false,true,cl);
	if (Absyn.DEBUG) System.out.println("colNameList6");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("colNameList",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // colNameList ::= colName ASC COMMA colNameList 
            {
              ColNameList RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ColName c = (ColName)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int clleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int clright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ColNameList cl = (ColNameList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ColNameList(c,true,false,cl);
	if (Absyn.DEBUG) System.out.println("colNameList5");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("colNameList",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // colNameList ::= colName COMMA colNameList 
            {
              ColNameList RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ColName c = (ColName)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int clleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int clright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ColNameList cl = (ColNameList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ColNameList(c,false,false,cl);
	if (Absyn.DEBUG) System.out.println("colNameList4");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("colNameList",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // colNameList ::= colName DESC 
            {
              ColNameList RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ColName c = (ColName)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new ColNameList(c,false,true,null);
	if (Absyn.DEBUG) System.out.println("colNameList3");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("colNameList",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // colNameList ::= colName ASC 
            {
              ColNameList RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ColName c = (ColName)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new ColNameList(c,true,false,null);
	if (Absyn.DEBUG) System.out.println("colNameList2");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("colNameList",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // colNameList ::= colName 
            {
              ColNameList RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ColName c = (ColName)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ColNameList(c,false,false,null);
	if (Absyn.DEBUG) System.out.println("colNameList1");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("colNameList",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // tblRefList ::= tblRef COMMA tblRefList 
            {
              TblRefList RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TblRef t = (TblRef)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tlright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TblRefList tl = (TblRefList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new TblRefList(t,tl);
	if (Absyn.DEBUG) System.out.println("tblRefList2");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tblRefList",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // tblRefList ::= tblRef 
            {
              TblRefList RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TblRef t = (TblRef)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new TblRefList(t,null);
	if (Absyn.DEBUG) System.out.println("tblRefList1");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tblRefList",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // selectExprList ::= selectExpr COMMA selectExprList 
            {
              SelectExprList RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SelectExpr s = (SelectExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SelectExprList sl = (SelectExprList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new SelectExprList(s,sl);
	if (Absyn.DEBUG) System.out.println("selectExprList2");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("selectExprList",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // selectExprList ::= selectExpr 
            {
              SelectExprList RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SelectExpr s = (SelectExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new SelectExprList(s,null);
	if (Absyn.DEBUG) System.out.println("selectExprList1");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("selectExprList",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // selectExpr ::= MULT 
            {
              SelectExpr RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT = new SelectExpr(mleft, null, null, true);
	if (Absyn.DEBUG) System.out.println("select_expr 3");
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("selectExpr",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // selectExpr ::= value AS iden 
            {
              SelectExpr RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Value v = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new SelectExpr(v.pos, v, i,false);
	if (Absyn.DEBUG) System.out.println("selectExpr2");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("selectExpr",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // selectExpr ::= value 
            {
              SelectExpr RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Value v = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new SelectExpr(v.pos, v, null,false);
	if (Absyn.DEBUG) System.out.println("selectExpr1");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("selectExpr",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // boolExpr ::= LPAREN boolExpr RPAREN 
            {
              BoolExpr RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		BoolExpr b = (BoolExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT= new BracketBoolExpr(b.pos, b);
	if (Absyn.DEBUG) System.out.println("boolExpr9");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolExpr",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // boolExpr ::= value cop ALL LPAREN selectE RPAREN 
            {
              BoolExpr RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Value v = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Cop c = (Cop)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Select s = (Select)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new AllBoolExpr(v.pos, v, c, s);
	if (Absyn.DEBUG) System.out.println("boolExpr8");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolExpr",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // boolExpr ::= value IN LPAREN selectE RPAREN 
            {
              BoolExpr RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Value v = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Select s = (Select)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new InBoolExpr(v.pos, v, s);
	if (Absyn.DEBUG) System.out.println("boolExpr7");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolExpr",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // boolExpr ::= value cop ANY LPAREN selectE RPAREN 
            {
              BoolExpr RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Value v = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Cop c = (Cop)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Select s = (Select)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new AnyBoolExpr(v.pos, v, c, s);
	if (Absyn.DEBUG) System.out.println("boolExpr6");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolExpr",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // boolExpr ::= NOT EXISTS LPAREN selectE RPAREN 
            {
              BoolExpr RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Select s = (Select)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new ExistBoolExpr(s.pos, s, false);
	if (Absyn.DEBUG) System.out.println("boolExpr5");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolExpr",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // boolExpr ::= EXISTS LPAREN selectE RPAREN 
            {
              BoolExpr RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Select s = (Select)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new ExistBoolExpr(s.pos, s, true);
	if (Absyn.DEBUG) System.out.println("boolExpr4");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolExpr",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // boolExpr ::= boolExpr OR boolExpr 
            {
              BoolExpr RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		BoolExpr b1 = (BoolExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BoolExpr b2 = (BoolExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new OrBoolExpr(b1.pos, b1, b2);
	if (Absyn.DEBUG) System.out.println("boolExpr3");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolExpr",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // boolExpr ::= boolExpr AND boolExpr 
            {
              BoolExpr RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		BoolExpr b1 = (BoolExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BoolExpr b2 = (BoolExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new AndBoolExpr(b1.pos, b1, b2);
	if (Absyn.DEBUG) System.out.println("boolExpr2");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolExpr",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // boolExpr ::= value cop value 
            {
              BoolExpr RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Value v1 = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Cop c = (Cop)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Value v2 = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new CopValue(v1.pos, v1, v2 ,c);
	if (Absyn.DEBUG) System.out.println("boolExpr1");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolExpr",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // dataType ::= VARCHAR LPAREN NUM RPAREN 
            {
              DataType RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT= new DataType(7,i,0,0);
	if (Absyn.DEBUG) System.out.println("dataType9");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dataType",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // dataType ::= TIMESTAMP 
            {
              DataType RESULT =null;
		RESULT= new DataType(6,0,0,0);
	if (Absyn.DEBUG) System.out.println("dataType8");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dataType",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // dataType ::= DECIMAL LPAREN NUM COMMA NUM RPAREN 
            {
              DataType RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int jleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer j = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new DataType(8,0,i,j);
	if (Absyn.DEBUG) System.out.println("dataType7");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dataType",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // dataType ::= DECIMAL LPAREN NUM RPAREN 
            {
              DataType RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new DataType(5,0,i,0);
	if (Absyn.DEBUG) System.out.println("dataType6");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dataType",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // dataType ::= BOOLEAN 
            {
              DataType RESULT =null;
		RESULT= new DataType(4,0,0,0);
	if (Absyn.DEBUG) System.out.println("dataType5");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dataType",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // dataType ::= DATETIME 
            {
              DataType RESULT =null;
		RESULT= new DataType(3,0,0,0);
	if (Absyn.DEBUG) System.out.println("dataType4");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dataType",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // dataType ::= CHAR LPAREN NUM RPAREN 
            {
              DataType RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT= new DataType(2,i,0,0);
	if (Absyn.DEBUG) System.out.println("dataType3");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dataType",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // dataType ::= FLOAT 
            {
              DataType RESULT =null;
		RESULT= new DataType(1,0,0,0);
	if (Absyn.DEBUG) System.out.println("dataType2");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dataType",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // dataType ::= INT 
            {
              DataType RESULT =null;
		RESULT=new DataType(0,0,0,0);
	if (Absyn.DEBUG) System.out.println("dataType1");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dataType",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // col_def_3 ::= AUTOINCREMENT 
            {
              Object RESULT =null;
		RESULT = new IsAuto(true);
	if (Absyn.DEBUG) System.out.println("col_def_3_1");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("col_def_3",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // col_def_2 ::= col_def_3 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new HasDefault(null, c);
	if (Absyn.DEBUG) System.out.println("col_def_2_3");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("col_def_2",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // col_def_2 ::= DEFAULT constValue col_def_3 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ConstValue c = (ConstValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new HasDefault(c, c2);
	if (Absyn.DEBUG) System.out.println("col_def_2_2");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("col_def_2",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // col_def_2 ::= DEFAULT constValue 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ConstValue c = (ConstValue)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new HasDefault(c, null);
	if (Absyn.DEBUG) System.out.println("col_def_2_1");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("col_def_2",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // col_def_1 ::= col_def_2 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new IsNull(2, c);
	if (Absyn.DEBUG) System.out.println("col_def_1_5");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("col_def_1",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // col_def_1 ::= NULL col_def_2 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new IsNull(1, c);
	if (Absyn.DEBUG) System.out.println("col_def_1_4");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("col_def_1",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // col_def_1 ::= NOT NULL col_def_2 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new IsNull(0, c);
	if (Absyn.DEBUG) System.out.println("col_def_1_3");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("col_def_1",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // col_def_1 ::= NULL 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new IsNull(1, null);
	if (Absyn.DEBUG) System.out.println("col_def_1_2");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("col_def_1",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // col_def_1 ::= NOT NULL 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new IsNull(0, null);
	if (Absyn.DEBUG) System.out.println("col_def_1_1");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("col_def_1",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // columnDef ::= colName dataType col_def_1 
            {
              ColumnDef RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ColName c = (ColName)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DataType d = (DataType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ColumnDef(c.pos, d, c, c1);
	if (Absyn.DEBUG) System.out.println("columnDef2");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("columnDef",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // columnDef ::= colName dataType 
            {
              ColumnDef RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ColName c = (ColName)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DataType d = (DataType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ColumnDef(c.pos, d, c, null);
	if (Absyn.DEBUG) System.out.println("columnDef1");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("columnDef",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // createDef ::= PRIMARY KEY LPAREN colName RPAREN 
            {
              CreateDef RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ColName c = (ColName)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=new CreateDef(c.pos, null, c);
	if (Absyn.DEBUG) System.out.println("createDef2");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("createDef",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // createDef ::= columnDef 
            {
              CreateDef RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ColumnDef c = (ColumnDef)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new CreateDef(c.pos, c, null);
	if (Absyn.DEBUG) System.out.println("createDef1");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("createDef",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // createDefList ::= createDef COMMA createDefList 
            {
              CreateDefList RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CreateDef c = (CreateDef)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cdlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cdlright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CreateDefList cdl = (CreateDefList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new CreateDefList(c,cdl);
	if (Absyn.DEBUG) System.out.println("createDefList2");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("createDefList",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // createDefList ::= createDef 
            {
              CreateDefList RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CreateDef c = (CreateDef)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new CreateDefList(c,null);
	if (Absyn.DEBUG) System.out.println("createDefList1");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("createDefList",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // valueList ::= value COMMA valueList 
            {
              ValueList RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Value v = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ValueList vl = (ValueList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new ValueList(v,vl);
	if (Absyn.DEBUG) System.out.println("valueList2");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valueList",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // valueList ::= value 
            {
              ValueList RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Value v = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new ValueList(v,null);
	if (Absyn.DEBUG) System.out.println("valueList1");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valueList",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // query_5 ::= ORDER BY colNameList 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ColNameList c = (ColNameList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT = new HasOrder(oleft, c);
	if (Absyn.DEBUG) System.out.println("query_5");
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("query_5",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // query_4 ::= HAVING boolExpr 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BoolExpr b = (BoolExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT = new HasHaving( b, null);
	if (Absyn.DEBUG) System.out.println("query_4 3");
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("query_4",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // query_4 ::= query_5 
            {
              Object RESULT =null;
		int qleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int qright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object q = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT = new HasHaving(null, q);
	if (Absyn.DEBUG) System.out.println("query_4 2");
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("query_4",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // query_4 ::= HAVING boolExpr query_5 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		BoolExpr b = (BoolExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int qright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object q = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT = new HasHaving( b, q);
	if (Absyn.DEBUG) System.out.println("query_4 1");
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("query_4",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // query_3 ::= GROUP BY colName 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ColName c = (ColName)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT = new HasGroup(c, null);
	if (Absyn.DEBUG) System.out.println("query_3 3");
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("query_3",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // query_3 ::= query_4 
            {
              Object RESULT =null;
		int qleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int qright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object q = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT = new HasGroup(null, q);
	if (Absyn.DEBUG) System.out.println("query_3 2");
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("query_3",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // query_3 ::= GROUP BY colName query_4 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ColName c = (ColName)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int qright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object q = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT = new HasGroup(c, q);
	if (Absyn.DEBUG) System.out.println("query_3 1");
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("query_3",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // query_2 ::= WHERE boolExpr 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BoolExpr b = (BoolExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT = new HasWhere( b, null);
	if (Absyn.DEBUG) System.out.println("query_2 3");
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("query_2",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // query_2 ::= query_3 
            {
              Object RESULT =null;
		int qleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int qright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object q = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT = new HasWhere( null, q);
	if (Absyn.DEBUG) System.out.println("query_2 2");
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("query_2",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // query_2 ::= WHERE boolExpr query_3 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		BoolExpr b = (BoolExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int qright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object q = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT = new HasWhere( b, q);
	if (Absyn.DEBUG) System.out.println("query_2 1");
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("query_2",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // query_1 ::= FROM tblRefList 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TblRefList t = (TblRefList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT = new HasFrom(t, null);
	if (Absyn.DEBUG) System.out.println("query_1 3");
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("query_1",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // query_1 ::= query_2 
            {
              Object RESULT =null;
		int qleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int qright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object q = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT = new HasFrom(null, q);
	if (Absyn.DEBUG) System.out.println("query_1 2");
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("query_1",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // query_1 ::= FROM tblRefList query_2 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TblRefList t = (TblRefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int qright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object q = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT = new HasFrom(t, q);
	if (Absyn.DEBUG) System.out.println("query_1 1");
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("query_1",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // selectE ::= SELECT DISTINCT selectExprList query_1 
            {
              Select RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SelectExprList s = (SelectExprList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int qright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object q = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT = new Select(s, true, q);
	if (Absyn.DEBUG) System.out.println("query 4");
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("selectE",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // selectE ::= SELECT selectExprList query_1 
            {
              Select RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SelectExprList s = (SelectExprList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int qright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object q = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT = new Select(s, false, q);
	if (Absyn.DEBUG) System.out.println("query 3");
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("selectE",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // selectE ::= SELECT DISTINCT selectExprList 
            {
              Select RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SelectExprList s = (SelectExprList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT = new Select(s, true, null);
	if (Absyn.DEBUG) System.out.println("query 2");
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("selectE",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // selectE ::= SELECT selectExprList 
            {
              Select RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SelectExprList s = (SelectExprList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT = new Select(s, false, null);
	if (Absyn.DEBUG) System.out.println("select_expr_list");
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("selectE",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // absyn ::= selectE 
            {
              Absyn RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Select s = (Select)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if (Absyn.DEBUG) System.out.println("exp16");RESULT = s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("absyn",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // absyn ::= DROP INDEX iden ON iden 
            {
              Absyn RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new DropIndex(ileft, i, i2);
	if (Absyn.DEBUG) System.out.println("exp15");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("absyn",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // absyn ::= CREATE UNIQUE INDEX iden ON iden LPAREN colName RPAREN 
            {
              Absyn RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ColName c = (ColName)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new CreateIndex(ileft, true, i, i2, c);
	if (Absyn.DEBUG) System.out.println("exp14");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("absyn",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // absyn ::= CREATE INDEX iden ON iden LPAREN colName RPAREN 
            {
              Absyn RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ColName c = (ColName)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new CreateIndex(ileft, false, i, i2, c);
	if (Absyn.DEBUG) System.out.println("exp13");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("absyn",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // absyn ::= UPDATE iden SET updateList WHERE boolExpr 
            {
              Absyn RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		UpdateList u = (UpdateList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BoolExpr b = (BoolExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new Update(ileft, i, u, b);
	if (Absyn.DEBUG) System.out.println("exp12");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("absyn",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // absyn ::= UPDATE iden SET updateList 
            {
              Absyn RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		UpdateList u = (UpdateList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new Update(ileft, i, u, null);
	if (Absyn.DEBUG) System.out.println("exp11");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("absyn",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // absyn ::= DELETE FROM iden WHERE boolExpr 
            {
              Absyn RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BoolExpr b = (BoolExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new Delete(ileft, i, b);
	if (Absyn.DEBUG) System.out.println("exp10");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("absyn",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // absyn ::= DELETE FROM iden 
            {
              Absyn RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Delete(ileft,i,null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("absyn",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // absyn ::= INSERT INTO iden LPAREN colNameList RPAREN VALUES LPAREN valueList RPAREN 
            {
              Absyn RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ColNameList c = (ColNameList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ValueList v = (ValueList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Insert(ileft, i, v, null,c);
	if (Absyn.DEBUG) System.out.println("exp9");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("absyn",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // absyn ::= INSERT INTO iden LPAREN selectE RPAREN 
            {
              Absyn RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Select s = (Select)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Insert(ileft, i, null, s,null);
	if (Absyn.DEBUG) System.out.println("exp8");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("absyn",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // absyn ::= INSERT INTO iden VALUES LPAREN valueList RPAREN 
            {
              Absyn RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ValueList v = (ValueList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT= new Insert(ileft, i, v, null,null);
	if (Absyn.DEBUG) System.out.println("exp7");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("absyn",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // absyn ::= DROP TABLE iden COMMA iden 
            {
              Absyn RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int jleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int jright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String j = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new DropTable(ileft, new NameList(i, new NameList(j, null)));
	if (Absyn.DEBUG) System.out.println("exp6");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("absyn",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // absyn ::= DROP TABLE iden 
            {
              Absyn RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new DropTable(ileft,new NameList(i, null));
	if (Absyn.DEBUG) System.out.println("exp5");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("absyn",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // absyn ::= CREATE TABLE iden LPAREN createDefList RPAREN 
            {
              Absyn RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CreateDefList c = (CreateDefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=new CreateTable(ileft, i ,c);
	if (Absyn.DEBUG) System.out.println("exp4");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("absyn",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // absyn ::= DROP DATABASE iden 
            {
              Absyn RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new DropDatabase(ileft, i);
	if (Absyn.DEBUG) System.out.println("exp3");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("absyn",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // absyn ::= USE iden 
            {
              Absyn RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new UseDatabase(ileft, i);
	if (Absyn.DEBUG) System.out.println("exp2");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("absyn",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // absyn ::= CREATE DATABASE iden 
            {
              Absyn RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new CreateDatabase(ileft, i);
	if (Absyn.DEBUG) System.out.println("exp1");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("absyn",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // absynlist ::= absyn SEMICOLON absynlist 
            {
              AbsynList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Absyn e = (Absyn)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int elistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elistright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbsynList elist = (AbsynList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new AbsynList(e,elist);
	if (Absyn.DEBUG) System.out.println("explist2");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("absynlist",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // absynlist ::= absyn SEMICOLON 
            {
              AbsynList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Absyn e = (Absyn)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=new AbsynList(e,null);
		if (Absyn.DEBUG) System.out.println("explist1");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("absynlist",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= absynlist EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbsynList start_val = (AbsynList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

