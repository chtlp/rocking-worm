/* The following code was generated by JFlex 1.4.3 on 11-5-26 ÉÏÎç11:01 */

package parser;
import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 11-5-26 ÉÏÎç11:01 from the specification file
 * <tt>lexer.flex</tt>
 */
public class lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 2;
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\1\1\0\1\3\1\2\22\0\1\3\4\0\1\52"+
    "\1\0\1\53\1\37\1\40\1\50\1\46\1\42\1\47\1\7\1\51"+
    "\12\6\1\0\1\41\1\45\1\43\1\44\2\0\1\13\1\16\1\10"+
    "\1\15\1\12\1\31\1\36\1\32\1\24\1\4\1\27\1\23\1\25"+
    "\1\30\1\21\1\22\1\4\1\11\1\17\1\14\1\20\1\33\1\34"+
    "\1\35\1\26\1\4\4\0\1\5\1\0\1\13\1\16\1\10\1\15"+
    "\1\12\1\31\1\36\1\32\1\24\1\4\1\27\1\23\1\25\1\30"+
    "\1\21\1\22\1\4\1\11\1\17\1\14\1\20\1\33\1\34\1\35"+
    "\1\26\1\4\uff85\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\3\2\1\3\1\4\1\5\23\3\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\0\4\3"+
    "\1\25\13\3\1\26\4\3\1\27\1\30\1\3\1\31"+
    "\13\3\1\32\1\33\1\34\1\35\4\3\1\36\1\3"+
    "\1\37\1\40\1\41\1\42\12\3\1\43\1\3\1\44"+
    "\1\45\3\3\1\46\2\3\1\47\1\50\1\51\1\3"+
    "\1\52\11\3\1\53\4\3\1\54\1\3\1\55\12\3"+
    "\1\56\2\3\1\57\1\60\7\3\1\61\2\3\1\62"+
    "\12\3\1\63\1\3\1\64\1\3\1\65\3\3\1\66"+
    "\1\67\1\70\1\71\3\3\1\72\5\3\1\73\1\74"+
    "\1\3\1\75\1\76\1\3\1\77\2\3\1\100\1\101"+
    "\3\3\1\102\1\103\1\104\2\3\1\105\1\106\1\107"+
    "\1\3\1\110\4\3\1\111";

  private static int [] zzUnpackAction() {
    int [] result = new int[222];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\54\0\130\0\204\0\260\0\130\0\334\0\u0108"+
    "\0\130\0\u0134\0\u0160\0\u018c\0\u01b8\0\u01e4\0\u0210\0\u023c"+
    "\0\u0268\0\u0294\0\u02c0\0\u02ec\0\u0318\0\u0344\0\u0370\0\u039c"+
    "\0\u03c8\0\u03f4\0\u0420\0\u044c\0\130\0\130\0\130\0\130"+
    "\0\130\0\u0478\0\u04a4\0\130\0\130\0\130\0\130\0\130"+
    "\0\130\0\130\0\130\0\u04d0\0\u04fc\0\u0528\0\u0554\0\u0580"+
    "\0\u05ac\0\u05d8\0\u0604\0\u0630\0\u065c\0\u0688\0\u06b4\0\u06e0"+
    "\0\u070c\0\u0738\0\u0764\0\u0790\0\334\0\u07bc\0\u07e8\0\u0814"+
    "\0\u0840\0\u086c\0\334\0\u0898\0\u08c4\0\u08f0\0\u091c\0\u0948"+
    "\0\u0974\0\u09a0\0\u09cc\0\u09f8\0\u0a24\0\u0a50\0\u0a7c\0\u0aa8"+
    "\0\130\0\130\0\130\0\u04d0\0\u0ad4\0\u0b00\0\u0b2c\0\u0b58"+
    "\0\334\0\u0b84\0\334\0\334\0\334\0\334\0\u0bb0\0\u0bdc"+
    "\0\u0c08\0\u0c34\0\u0c60\0\u0c8c\0\u0cb8\0\u0ce4\0\u0d10\0\u0d3c"+
    "\0\334\0\u0d68\0\334\0\334\0\u0d94\0\u0dc0\0\u0dec\0\u0e18"+
    "\0\u0e44\0\u0e70\0\334\0\334\0\334\0\u0e9c\0\334\0\u0ec8"+
    "\0\u0ef4\0\u0f20\0\u0f4c\0\u0f78\0\u0fa4\0\u0fd0\0\u0ffc\0\u1028"+
    "\0\334\0\u1054\0\u1080\0\u10ac\0\u10d8\0\334\0\u1104\0\334"+
    "\0\u1130\0\u115c\0\u1188\0\u11b4\0\u11e0\0\u120c\0\u1238\0\u1264"+
    "\0\u1290\0\u12bc\0\334\0\u12e8\0\u1314\0\334\0\334\0\u1340"+
    "\0\u136c\0\u1398\0\u13c4\0\u13f0\0\u141c\0\u1448\0\334\0\u1474"+
    "\0\u14a0\0\334\0\u14cc\0\u14f8\0\u1524\0\u1550\0\u157c\0\u15a8"+
    "\0\u15d4\0\u1600\0\u162c\0\u1658\0\334\0\u1684\0\334\0\u16b0"+
    "\0\334\0\u16dc\0\u1708\0\u1734\0\334\0\334\0\334\0\334"+
    "\0\u1760\0\u178c\0\u17b8\0\334\0\u17e4\0\u1810\0\u183c\0\u1868"+
    "\0\u1894\0\334\0\334\0\u18c0\0\334\0\334\0\u18ec\0\334"+
    "\0\u1918\0\u1944\0\334\0\334\0\u1970\0\u199c\0\u19c8\0\334"+
    "\0\334\0\334\0\u19f4\0\u1a20\0\334\0\334\0\334\0\u1a4c"+
    "\0\334\0\u1a78\0\u1aa4\0\u1ad0\0\u1afc\0\334";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[222];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\7\1\3\1\10\1\11"+
    "\1\12\1\7\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\7\1\24\1\25\1\7\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\7\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\53\52\1\53\56\0\1\6"+
    "\52\0\1\6\56\0\3\7\1\0\27\7\23\0\1\10"+
    "\1\54\50\0\3\7\1\0\1\7\1\55\7\7\1\56"+
    "\10\7\1\57\4\7\21\0\3\7\1\0\25\7\1\60"+
    "\1\7\21\0\3\7\1\0\7\7\1\61\1\62\2\7"+
    "\1\63\4\7\1\64\2\7\1\65\3\7\21\0\3\7"+
    "\1\0\3\7\1\66\10\7\1\67\12\7\21\0\3\7"+
    "\1\0\1\7\1\70\1\71\1\72\10\7\1\73\12\7"+
    "\21\0\3\7\1\0\11\7\1\74\4\7\1\75\10\7"+
    "\21\0\3\7\1\0\2\7\1\76\5\7\1\77\16\7"+
    "\21\0\3\7\1\0\7\7\1\100\2\7\1\101\14\7"+
    "\21\0\3\7\1\0\1\7\1\102\16\7\1\103\6\7"+
    "\21\0\3\7\1\0\1\7\1\104\25\7\21\0\3\7"+
    "\1\0\20\7\1\105\6\7\21\0\3\7\1\0\3\7"+
    "\1\106\10\7\1\107\12\7\21\0\3\7\1\0\2\7"+
    "\1\110\24\7\21\0\3\7\1\0\10\7\1\111\1\112"+
    "\15\7\21\0\3\7\1\0\1\7\1\113\11\7\1\114"+
    "\13\7\21\0\3\7\1\0\3\7\1\115\23\7\21\0"+
    "\3\7\1\0\3\7\1\116\23\7\21\0\3\7\1\0"+
    "\22\7\1\117\4\7\21\0\3\7\1\0\1\7\1\120"+
    "\25\7\60\0\1\121\53\0\1\122\1\123\15\0\1\124"+
    "\51\0\3\7\1\0\2\7\1\125\24\7\21\0\3\7"+
    "\1\0\10\7\1\126\16\7\21\0\3\7\1\0\3\7"+
    "\1\127\23\7\21\0\3\7\1\0\14\7\1\130\12\7"+
    "\21\0\3\7\1\0\1\131\26\7\21\0\3\7\1\0"+
    "\4\7\1\132\22\7\21\0\3\7\1\0\13\7\1\133"+
    "\13\7\21\0\3\7\1\0\5\7\1\134\10\7\1\135"+
    "\10\7\21\0\3\7\1\0\26\7\1\136\21\0\3\7"+
    "\1\0\6\7\1\137\20\7\21\0\3\7\1\0\15\7"+
    "\1\140\11\7\21\0\3\7\1\0\11\7\1\141\15\7"+
    "\21\0\3\7\1\0\1\142\6\7\1\143\3\7\1\144"+
    "\5\7\1\145\5\7\21\0\3\7\1\0\4\7\1\146"+
    "\22\7\21\0\3\7\1\0\7\7\1\147\17\7\21\0"+
    "\3\7\1\0\11\7\1\150\15\7\21\0\3\7\1\0"+
    "\4\7\1\151\6\7\1\152\13\7\21\0\3\7\1\0"+
    "\15\7\1\153\11\7\21\0\3\7\1\0\2\7\1\154"+
    "\24\7\21\0\3\7\1\0\5\7\1\155\21\7\21\0"+
    "\3\7\1\0\5\7\1\156\21\7\21\0\3\7\1\0"+
    "\14\7\1\157\12\7\21\0\3\7\1\0\4\7\1\160"+
    "\1\161\1\7\1\162\17\7\21\0\3\7\1\0\25\7"+
    "\1\163\1\7\21\0\3\7\1\0\20\7\1\164\6\7"+
    "\21\0\3\7\1\0\16\7\1\165\10\7\21\0\3\7"+
    "\1\0\13\7\1\166\13\7\21\0\3\7\1\0\4\7"+
    "\1\167\22\7\21\0\3\7\1\0\11\7\1\170\15\7"+
    "\21\0\3\7\1\0\11\7\1\171\15\7\21\0\3\7"+
    "\1\0\23\7\1\172\3\7\21\0\3\7\1\0\1\7"+
    "\1\173\11\7\1\174\13\7\21\0\3\7\1\0\2\7"+
    "\1\175\24\7\21\0\3\7\1\0\11\7\1\176\15\7"+
    "\21\0\3\7\1\0\3\7\1\177\23\7\21\0\3\7"+
    "\1\0\20\7\1\200\6\7\21\0\3\7\1\0\1\7"+
    "\1\201\25\7\21\0\3\7\1\0\7\7\1\202\17\7"+
    "\21\0\3\7\1\0\11\7\1\203\15\7\21\0\3\7"+
    "\1\0\13\7\1\204\13\7\21\0\3\7\1\0\2\7"+
    "\1\205\24\7\21\0\3\7\1\0\12\7\1\206\14\7"+
    "\21\0\3\7\1\0\14\7\1\207\12\7\21\0\3\7"+
    "\1\0\1\210\26\7\21\0\3\7\1\0\2\7\1\211"+
    "\24\7\21\0\3\7\1\0\3\7\1\212\23\7\21\0"+
    "\3\7\1\0\2\7\1\213\1\214\23\7\21\0\3\7"+
    "\1\0\4\7\1\215\22\7\21\0\3\7\1\0\13\7"+
    "\1\216\13\7\21\0\3\7\1\0\2\7\1\217\24\7"+
    "\21\0\3\7\1\0\3\7\1\220\23\7\21\0\3\7"+
    "\1\0\2\7\1\221\24\7\21\0\3\7\1\0\15\7"+
    "\1\222\11\7\21\0\3\7\1\0\11\7\1\223\15\7"+
    "\21\0\3\7\1\0\2\7\1\224\24\7\21\0\3\7"+
    "\1\0\2\7\1\225\24\7\21\0\3\7\1\0\13\7"+
    "\1\226\13\7\21\0\3\7\1\0\15\7\1\227\11\7"+
    "\21\0\3\7\1\0\3\7\1\230\23\7\21\0\3\7"+
    "\1\0\14\7\1\231\12\7\21\0\3\7\1\0\1\232"+
    "\26\7\21\0\3\7\1\0\10\7\1\233\16\7\21\0"+
    "\3\7\1\0\1\7\1\234\25\7\21\0\3\7\1\0"+
    "\10\7\1\235\16\7\21\0\3\7\1\0\4\7\1\236"+
    "\22\7\21\0\3\7\1\0\4\7\1\237\22\7\21\0"+
    "\3\7\1\0\4\7\1\240\22\7\21\0\1\7\1\241"+
    "\1\7\1\0\27\7\21\0\3\7\1\0\2\7\1\242"+
    "\24\7\21\0\3\7\1\0\7\7\1\243\17\7\21\0"+
    "\3\7\1\0\15\7\1\244\11\7\21\0\3\7\1\0"+
    "\4\7\1\245\22\7\21\0\3\7\1\0\10\7\1\246"+
    "\16\7\21\0\3\7\1\0\4\7\1\247\22\7\21\0"+
    "\3\7\1\0\6\7\1\250\20\7\21\0\3\7\1\0"+
    "\14\7\1\251\12\7\21\0\3\7\1\0\2\7\1\252"+
    "\24\7\21\0\3\7\1\0\1\253\26\7\21\0\3\7"+
    "\1\0\4\7\1\254\22\7\21\0\3\7\1\0\1\7"+
    "\1\255\25\7\21\0\3\7\1\0\3\7\1\256\23\7"+
    "\21\0\3\7\1\0\25\7\1\257\1\7\21\0\3\7"+
    "\1\0\1\7\1\260\25\7\21\0\3\7\1\0\4\7"+
    "\1\261\22\7\21\0\3\7\1\0\20\7\1\262\6\7"+
    "\21\0\3\7\1\0\22\7\1\263\4\7\21\0\3\7"+
    "\1\0\2\7\1\264\24\7\21\0\3\7\1\0\2\7"+
    "\1\265\24\7\21\0\3\7\1\0\12\7\1\266\14\7"+
    "\21\0\3\7\1\0\2\7\1\267\24\7\21\0\3\7"+
    "\1\0\7\7\1\270\17\7\21\0\3\7\1\0\14\7"+
    "\1\271\12\7\21\0\3\7\1\0\4\7\1\272\22\7"+
    "\21\0\3\7\1\0\3\7\1\273\23\7\21\0\3\7"+
    "\1\0\2\7\1\274\24\7\21\0\3\7\1\0\13\7"+
    "\1\275\13\7\21\0\3\7\1\0\14\7\1\276\12\7"+
    "\21\0\3\7\1\0\3\7\1\277\23\7\21\0\3\7"+
    "\1\0\20\7\1\300\6\7\21\0\3\7\1\0\3\7"+
    "\1\301\23\7\21\0\3\7\1\0\4\7\1\302\22\7"+
    "\21\0\3\7\1\0\2\7\1\303\24\7\21\0\3\7"+
    "\1\0\1\7\1\304\25\7\21\0\3\7\1\0\4\7"+
    "\1\305\22\7\21\0\3\7\1\0\26\7\1\306\21\0"+
    "\3\7\1\0\3\7\1\307\23\7\21\0\3\7\1\0"+
    "\7\7\1\310\17\7\21\0\3\7\1\0\20\7\1\311"+
    "\6\7\21\0\3\7\1\0\3\7\1\312\23\7\21\0"+
    "\3\7\1\0\13\7\1\313\13\7\21\0\3\7\1\0"+
    "\4\7\1\314\22\7\21\0\3\7\1\0\15\7\1\315"+
    "\11\7\21\0\3\7\1\0\7\7\1\316\17\7\21\0"+
    "\3\7\1\0\1\317\26\7\21\0\3\7\1\0\20\7"+
    "\1\320\6\7\21\0\3\7\1\0\16\7\1\321\10\7"+
    "\21\0\3\7\1\0\1\7\1\322\25\7\21\0\3\7"+
    "\1\0\1\323\26\7\21\0\3\7\1\0\15\7\1\324"+
    "\11\7\21\0\3\7\1\0\2\7\1\325\24\7\21\0"+
    "\3\7\1\0\2\7\1\326\24\7\21\0\3\7\1\0"+
    "\4\7\1\327\22\7\21\0\3\7\1\0\1\7\1\330"+
    "\25\7\21\0\3\7\1\0\12\7\1\331\14\7\21\0"+
    "\3\7\1\0\2\7\1\332\24\7\21\0\3\7\1\0"+
    "\15\7\1\333\11\7\21\0\3\7\1\0\2\7\1\334"+
    "\24\7\21\0\3\7\1\0\20\7\1\335\6\7\21\0"+
    "\3\7\1\0\4\7\1\336\22\7\15\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6952];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\2\1\1\11\2\1\1\11\23\1\5\11"+
    "\2\1\10\11\1\0\44\1\3\11\213\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[222];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	StringBuffer string = new StringBuffer();
	int count;
	
	private java_cup.runtime.Symbol tok(int kind, Object value) 
	{
		return new java_cup.runtime.Symbol(kind, yychar, yychar+yylength(),value);
	}
		


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 166) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 66: 
          { return tok(sym.BOOLEAN,null);
          }
        case 74: break;
        case 45: 
          { return tok(sym.DESC,null);
          }
        case 75: break;
        case 1: 
          { throw new Error("Illegal character < "+yytext()+" >!");
          }
        case 76: break;
        case 12: 
          { return tok(sym.LT,null);
          }
        case 77: break;
        case 50: 
          { return tok(sym.TABLE,null);
          }
        case 78: break;
        case 63: 
          { return tok(sym.VALUES,null);
          }
        case 79: break;
        case 44: 
          { return tok(sym.DROP,null);
          }
        case 80: break;
        case 72: 
          { return tok(sym.TIMESTAMP,null);
          }
        case 81: break;
        case 27: 
          { return tok(sym.LTEQ,null);
          }
        case 82: break;
        case 37: 
          { return tok(sym.USE,null);
          }
        case 83: break;
        case 18: 
          { string.setLength(0);yybegin(STRING);
          }
        case 84: break;
        case 26: 
          { return tok(sym.GTEQ,null);
          }
        case 85: break;
        case 69: 
          { return tok(sym.DATETIME,null);
          }
        case 86: break;
        case 6: 
          { return tok(sym.LPAREN,null);
          }
        case 87: break;
        case 39: 
          { return tok(sym.MAX,null);
          }
        case 88: break;
        case 20: 
          { yybegin(YYINITIAL); return tok(sym.STR, string.toString());
          }
        case 89: break;
        case 52: 
          { return tok(sym.INDEX,null);
          }
        case 90: break;
        case 5: 
          { return tok(sym.DOT,null);
          }
        case 91: break;
        case 57: 
          { return tok(sym.EXISTS,null);
          }
        case 92: break;
        case 40: 
          { return tok(sym.MIN,null);
          }
        case 93: break;
        case 4: 
          { return tok(sym.NUM,new Integer(yytext()));
          }
        case 94: break;
        case 16: 
          { return tok(sym.DIV,null);
          }
        case 95: break;
        case 56: 
          { return tok(sym.CREATE,null);
          }
        case 96: break;
        case 38: 
          { return tok(sym.INT,null);
          }
        case 97: break;
        case 51: 
          { return tok(sym.ORDER,null);
          }
        case 98: break;
        case 68: 
          { return tok(sym.VARCHAR,null);
          }
        case 99: break;
        case 47: 
          { return tok(sym.NULL,null);
          }
        case 100: break;
        case 10: 
          { return tok(sym.EQ,null);
          }
        case 101: break;
        case 62: 
          { return tok(sym.HAVING,null);
          }
        case 102: break;
        case 48: 
          { return tok(sym.FROM,null);
          }
        case 103: break;
        case 31: 
          { return tok(sym.ALL,null);
          }
        case 104: break;
        case 17: 
          { return tok(sym.MOD,null);
          }
        case 105: break;
        case 28: 
          { return tok(sym.NEQ,null);
          }
        case 106: break;
        case 21: 
          { return tok(sym.AS,null);
          }
        case 107: break;
        case 49: 
          { return tok(sym.COUNT,null);
          }
        case 108: break;
        case 35: 
          { return tok(sym.SET,null);
          }
        case 109: break;
        case 65: 
          { return tok(sym.DEFAULT,null);
          }
        case 110: break;
        case 58: 
          { return tok(sym.DELETE,null);
          }
        case 111: break;
        case 33: 
          { return tok(sym.ANY,null);
          }
        case 112: break;
        case 42: 
          { return tok(sym.NOT,null);
          }
        case 113: break;
        case 41: 
          { return tok(sym.KEY,null);
          }
        case 114: break;
        case 71: 
          { return tok(sym.DISTINCT,null);
          }
        case 115: break;
        case 23: 
          { return tok(sym.OR,null);
          }
        case 116: break;
        case 30: 
          { return tok(sym.ASC,null);
          }
        case 117: break;
        case 15: 
          { return tok(sym.MULT,null);
          }
        case 118: break;
        case 61: 
          { return tok(sym.INSERT,null);
          }
        case 119: break;
        case 14: 
          { return tok(sym.MINUS,null);
          }
        case 120: break;
        case 24: 
          { return tok(sym.ON,null);
          }
        case 121: break;
        case 67: 
          { return tok(sym.PRIMARY,null);
          }
        case 122: break;
        case 7: 
          { return tok(sym.RPAREN,null);
          }
        case 123: break;
        case 11: 
          { return tok(sym.GT,null);
          }
        case 124: break;
        case 36: 
          { return tok(sym.SUM,null);
          }
        case 125: break;
        case 73: 
          { return tok(sym.AUTOINCREMENT,null);
          }
        case 126: break;
        case 70: 
          { return tok(sym.DATABASE,null);
          }
        case 127: break;
        case 22: 
          { return tok(sym.BY,null);
          }
        case 128: break;
        case 32: 
          { return tok(sym.AND,null);
          }
        case 129: break;
        case 29: 
          { return tok(sym.FLOAT,new Float(yytext()));
          }
        case 130: break;
        case 43: 
          { return tok(sym.CHAR,null);
          }
        case 131: break;
        case 53: 
          { return tok(sym.FLOAT,null);
          }
        case 132: break;
        case 64: 
          { return tok(sym.DECIMAL,null);
          }
        case 133: break;
        case 59: 
          { return tok(sym.SELECT,null);
          }
        case 134: break;
        case 46: 
          { return tok(sym.INTO,null);
          }
        case 135: break;
        case 13: 
          { return tok(sym.PLUS,null);
          }
        case 136: break;
        case 2: 
          { /* ignore */
          }
        case 137: break;
        case 34: 
          { return tok(sym.AVG,null);
          }
        case 138: break;
        case 3: 
          { return tok(sym.ID, yytext());
          }
        case 139: break;
        case 19: 
          { string.append( yytext() );
          }
        case 140: break;
        case 8: 
          { return tok(sym.SEMICOLON,null);
          }
        case 141: break;
        case 55: 
          { return tok(sym.GROUP,null);
          }
        case 142: break;
        case 25: 
          { return tok(sym.IN,null);
          }
        case 143: break;
        case 54: 
          { return tok(sym.WHERE,null);
          }
        case 144: break;
        case 9: 
          { return tok(sym.COMMA,null);
          }
        case 145: break;
        case 60: 
          { return tok(sym.UPDATE,null);
          }
        case 146: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              {
                if (yystate()==STRING) throw new Error("String presentation error!");
     return tok(sym.EOF, null);
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
